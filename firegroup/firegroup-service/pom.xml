<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.uc.firegroup</groupId>
		<artifactId>firegroup</artifactId>
		<version>0.0.8</version>
	</parent>
	<artifactId>firegroup-service</artifactId>
	<dependencies>
		<dependency>
			<groupId>com.uc.framework</groupId>
			<artifactId>uc-framework</artifactId>
			<version>0.0.39</version>
		</dependency>
		<dependency>
			<groupId>com.uc.firegroup</groupId>
			<artifactId>firegroup-api</artifactId>
			<version>0.0.49</version>
		</dependency>

		<dependency>
			<groupId>net.logstash.logback</groupId>
			<artifactId>logstash-logback-encoder</artifactId>
		</dependency>
		<dependency>
			<groupId>com.uc</groupId>
			<artifactId>uc-external</artifactId>
			<version>0.0.17</version>
		</dependency>
		<!-- <dependency> <groupId>com.uc.neighbour</groupId> <artifactId>neighbour-feign</artifactId> 
			<version>1.0</version> </dependency> -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>2.2.2</version>
		</dependency>
	</dependencies>

	<distributionManagement>
		<repository>
			<id>maven-releases</id>
			<url>http://nexus.bilinl.com/repository/maven-releases/</url>
		</repository>
	</distributionManagement>

	<repositories>
		<repository>
			<!--远程仓库唯一标识 -->
			<id>maven-releases</id>
			<!--远程仓库名称 -->
			<name>maven-releases</name>
			<!--如何处理远程仓库里发布版本的下载 -->
			<releases>
				<!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->
				<enabled>true</enabled>
				<!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 -->
				<updatePolicy>always</updatePolicy>
				<!--当Maven验证构件校验文件失败时该怎么做-ignore（忽略），fail（失败），或者warn（警告）。 -->
				<checksumPolicy>warn</checksumPolicy>
			</releases>
			<!--如何处理远程仓库里快照版本的下载。有了releases和snapshots这两组配置，POM就可以在每个单独的仓库中，为每种类型的构件采取不同的策略。例如，可能有人会决定只为开发目的开启对快照版本下载的支持。参见repositories/repository/releases元素 -->
			<snapshots>
				<!--true或者false表示该仓库是否为下载某种类型构件（发布版，快照版）开启。 -->
				<enabled>true</enabled>
				<!--该元素指定更新发生的频率。Maven会比较本地POM和远程POM的时间戳。这里的选项是：always（一直），daily（默认，每日），interval：X（这里X是以分钟为单位的时间间隔），或者never（从不）。 -->
				<updatePolicy>always</updatePolicy>
				<!--当Maven验证构件校验文件失败时该怎么做-ignore（忽略），fail（失败），或者warn（警告）。 -->
				<checksumPolicy>warn</checksumPolicy>
			</snapshots>
			<!--远程仓库URL，按protocol://hostname/path形式 -->
			<url>http://nexus.bilinl.com/repository/maven-releases/</url>
			<!--用于定位和排序构件的仓库布局类型-可以是default（默认）或者legacy（遗留）。Maven 2为其仓库提供了一个默认的布局；然而，Maven 
				1.x有一种不同的布局。我们可以使用该元素指定布局是default（默认）还是legacy（遗留）。 -->
			<layout>default</layout>
		</repository>

	</repositories>
	<build>
		<finalName>${project.artifactId}</finalName>
		<!-- 资源路径 -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-resources-plugin</artifactId>
				<configuration>
					<encoding>UTF-8</encoding>
					<useDefaultDelimiters>true</useDefaultDelimiters>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.mybatis.generator</groupId>
				<artifactId>mybatis-generator-maven-plugin</artifactId>
				<version>1.3.3</version>
				<configuration>
					<verbose>true</verbose>
					<overwrite>true</overwrite>
				</configuration>
				<executions>
					<execution>
						<id>generate</id>
						<!--<goals> -->
						<!--<goal>generate</goal> -->
						<!--</goals> -->
					</execution>
				</executions>
			</plugin>
		</plugins>
		<!-- 配置启动类 -->
		<pluginManagement>
			<plugins>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-jar-plugin</artifactId>
					<configuration>
						<archive>
							<manifest>
								<mainClass>com.uc.firegroup.service.MainApplication</mainClass>
								<addClasspath>true</addClasspath>
								<classpathPrefix>lib/</classpathPrefix>
							</manifest>
						</archive>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

</project>